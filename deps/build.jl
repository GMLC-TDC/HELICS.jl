using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libhelicsSharedLib"], :libhelicsSharedLib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/GMLC-TDC/HELICSBuilder/releases/download/v2.2.1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-gnu.tar.gz", "e1735a5ffcd66e24c63372d1924280081d4175c5299dd8290e77d456802dc586"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-musl.tar.gz", "9890f75365ec6e5f1ba015152485a9ad8ea64949d2ef89e533f4cc23efa3b14e"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-gnueabihf.tar.gz", "99064604ff20c4e04a346debe02a5bd28e82257264ec7a8eb64035af4a8eeb24"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-musleabihf.tar.gz", "a984b2429a8f93709a4da22b075bf1410b6ce4c9df789c4b048877c865abaa7e"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-gnu.tar.gz", "1dc09ece7e0102c14ab32205666b609299e0cff624cdb9c1bd7dcede45211a6a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-musl.tar.gz", "edfee49eda2eb5e51475c5de2bd6f794bc6c75850f3a01e5375de6f02ee9628b"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.powerpc64le-linux-gnu.tar.gz", "37ba1f073c5af7766625eed8ed4805243469ef2712f84517c9c62ca7ca1430c5"),
    MacOS(:x86_64) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-apple-darwin14.tar.gz", "e6dd898496ec6da5761b6d84feb356043f519ed52e88e5b1aedace495a27de64"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-gnu.tar.gz", "fdefb10183e72dd74205b09a97f19bb7b5190d9da3c80b25856968ada9fcbc9d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-musl.tar.gz", "f350e0129c524f2cbfc5ecfde58f8eaac2adf4452d385cefb4fa8458ecd288e1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Build the dependencies
Mod = @eval module Anon end
Mod.include("build_ZMQ.v4.2.5+6.jl")

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

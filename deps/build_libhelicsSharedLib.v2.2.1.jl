using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libhelicsSharedLib"], :libhelicsSharedLib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/GMLC-TDC/HELICSBuilder/releases/download/v2.2.1-3"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-gnu-gcc7.tar.gz", "da461c401088a5cdad789c6bfe8793bc6f163b98c27a153652490657fea9612f"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-gnu-gcc8.tar.gz", "78de9f8fdd68227f856ae703785c68b55f0b81267244fc3734ff5eeb3dbd7bc2"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-musl-gcc7.tar.gz", "57e2996b7f325b62091945c0b5b64f74fb2a747ad81564851a2e5e73f3c54e52"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-musl-gcc8.tar.gz", "a0a53c2d982b1fd473c62bd9ea50f755931cf5eaed66c5dcaa3239870898088d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-gnueabihf-gcc7.tar.gz", "bd0dbcb7b112d47bde44512027fe656f61b7729d790bed183c0a1d562631c7ab"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-gnueabihf-gcc8.tar.gz", "0f8223f0015db04ae28d44d55bd4c34744d434b9af3977b3562d6113f4f70205"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-musleabihf-gcc7.tar.gz", "07acb08b68015e23e4ddac6337050cbca5e1c637aa76723f292b79c23989a2fd"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-musleabihf-gcc8.tar.gz", "44f31ab281258719c20832cee40800f916262b0b74af716a0a6c6f312a95d19a"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-gnu-gcc7.tar.gz", "f19cde87b0117345df6d94164cc1663aac4c2af7e0430947a9dba1e2c5384cf1"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-gnu-gcc8.tar.gz", "27361ba6fa45b17b63646e4aba98f4fc034fac77194b967aa631f533fa161db8"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-musl-gcc7.tar.gz", "96e798a1e761e81298d176a13ab3e1662e3e95adc6d0555fa40c14e0f4d5315c"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-musl-gcc8.tar.gz", "bfca14390fdff562c8b13ad0e33de3d811b31ff7d0b75280f15d1f097251037b"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.powerpc64le-linux-gnu-gcc7.tar.gz", "d9655ffe814918548c136eca7737187fd7a3828e23799a8a4b09e3fe3bb62417"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.powerpc64le-linux-gnu-gcc8.tar.gz", "e27d64fa20d6694a5d72101bd019f1ad05387b0fe789216223ad850b2a384686"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-apple-darwin14-gcc7.tar.gz", "3ff13a3e85fcb839ea47a55de02c04d10ead8921dd9c5b900849c1046ebe4406"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-apple-darwin14-gcc8.tar.gz", "3d831a8d71527f2b72406b5d70c675164c0362407f98e3eb11e64e6b1965a30a"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-gnu-gcc7.tar.gz", "43b2e5e5acce6783a0133e5ee7c4589e32e6f837bd62ff03a5def0f91cdd19ae"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-gnu-gcc8.tar.gz", "1f14cd06cee862bcb67214975a3772f87658729b905a4bb7720f190ef25b7639"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-musl-gcc7.tar.gz", "6c006a63f9137e921534d9c6ce1f6283bf441642b1d05130783fc890efc39ecb"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-musl-gcc8.tar.gz", "b95aaa4693baecfdf07b6eca8198f1a3ef205515e82c01008e083595f61edac4"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-w64-mingw32-gcc7.tar.gz", "183ed9f838dd84d9a357525bdfe9db2699991bd0e438fc4d82f80d9627a9492b"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-w64-mingw32-gcc8.tar.gz", "3db20d53e724afc9de1ae52557a9b659fadfd10d4f5abb64d2e0df5771c3f99e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libhelicsSharedLib"], :libhelicsSharedLib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/GMLC-TDC/HELICSBuilder/releases/download/v2.2.1-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-gnu.tar.gz", "646478dc12b86213ea5092ae47fa76fc15c5674a4fc9d269386da08ee1e6c895"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.aarch64-linux-musl.tar.gz", "23a1c98f3170210e1584f36b86a3d6d1a30532c041b5c35b9917725c8641a72d"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-gnueabihf.tar.gz", "7f6638fa8f8104f2c1c764f3769a706d88977ded732fc11bacf1e5894299cf39"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.arm-linux-musleabihf.tar.gz", "0c27174a70a7966d76edf9ca944e504fcbb55b50e2206bd8447e7c64295aa486"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-gnu.tar.gz", "f06160ab2a8a7512bb1d1da13321a777bd76d683f59b74c93ba5cf08a25d3681"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.i686-linux-musl.tar.gz", "ccc9f36c5c8ad7c379ea17d63741ab1d7de0fd9da1952789ea90dfc725aa0554"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.powerpc64le-linux-gnu.tar.gz", "939cc144cf957745259daa6fde27d6513d6ace854a7f6fb79803e31b1e35a8c2"),
    MacOS(:x86_64) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-apple-darwin14.tar.gz", "a6ec999d1b0b54a1334496139229e97ef95619191adc69aeb475d9c0941d6cd9"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-gnu.tar.gz", "9fe1b9f4a16497768105a01bda3c8221e735850b3065c63dce0802c170d5e49d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-linux-musl.tar.gz", "7769b3bab98cc491d5c3862bddf3c96914f02c9a778bd17a5a958eb51cd71486"),
    Windows(:x86_64) => ("$bin_prefix/libhelicsSharedLib.v2.2.1.x86_64-w64-mingw32.tar.gz", "b79106cc339bf6eed702c6768cddae9ad1030d274a72093c352bf2c3e398b578"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libhelicsSharedLib"], :libhelicsSharedLib),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/GMLC-TDC/HELICSBuilder/releases/download/v2.2.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.aarch64-linux-gnu-gcc7.tar.gz", "15c47aceed714e7a8ab90a69d26722c45a4e6e65bcfc187efde7af76fc417197"),
    Linux(:aarch64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.aarch64-linux-gnu-gcc8.tar.gz", "5c328bbe5d997269b2546c6315d2d6e962cf82243ec7b6a64838f6c25414efc7"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.aarch64-linux-musl-gcc7.tar.gz", "ed705af0d2d1ce65a76d5c65ce957c865502dad2de6983d97eca78c363873cbc"),
    Linux(:aarch64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.aarch64-linux-musl-gcc8.tar.gz", "356328877d0f4eb08197f371a15659ef1c580ddcda2a09af8a6bd79faffb6537"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.arm-linux-gnueabihf-gcc7.tar.gz", "fb3da5f6f2ef6bc6b1a0e87cf6ebf44776ed82ea1bc1c2d745aaad24d6940640"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.arm-linux-gnueabihf-gcc8.tar.gz", "c058c2c2f6df40aa092034b25ea250663f5c11d67c3e6e9b444f6ed128fae72d"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.arm-linux-musleabihf-gcc7.tar.gz", "2cd0f1ef9c35c513372fb3faa949c25fe096ec1cf45e45d9f8aab373be05aa37"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.arm-linux-musleabihf-gcc8.tar.gz", "855bb3cf1676ab95b0685a4d35354b0c48aa179b73730b1a1b609872f68f48bd"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.i686-linux-gnu-gcc7.tar.gz", "e8e531782ef2bb86194acda277d3727bf3562652651ec3bfb865e53bf18539c5"),
    Linux(:i686, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.i686-linux-gnu-gcc8.tar.gz", "7e6599b7ee336c6bfcba2d516d3cb48af89ae82f14e69bc517dc82365a57cf46"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.i686-linux-musl-gcc7.tar.gz", "9f65e52cff4ca87b303f6a21e793f996f9bfc0de982864f53d6b5c21778618ff"),
    Linux(:i686, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.i686-linux-musl-gcc8.tar.gz", "1eda15a82ff85ac52373a70fbf735456e96c5cde8adad1e67ba1caa358f3c64a"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.powerpc64le-linux-gnu-gcc7.tar.gz", "aaef816c6c3192a87798da199c0fdf7fc10b6e2c654822b627114b3cc5986964"),
    Linux(:powerpc64le, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.powerpc64le-linux-gnu-gcc8.tar.gz", "55aebc727e759faf910c164eff43c1e19fd1d1ef57c65129067ee4c9ebd55994"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-apple-darwin14-gcc7.tar.gz", "ffed05dc9c1eb682af5e3ed6ab9071af24399c62ae361c154365ea53dffc6a2d"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-apple-darwin14-gcc8.tar.gz", "9207535989f384e288e2cea1e1c38a174a954d912e50a6cbd0f83ba862f84452"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-linux-gnu-gcc7.tar.gz", "d94350bda0811a3db440192797d43c43b22facf879bf7a33598fbf80bdaf34e7"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-linux-gnu-gcc8.tar.gz", "8664ee3e54b3d8bc6afcf21ecd0bd7eb7a0ff5533689a50d0ead3c5e532d0537"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-linux-musl-gcc7.tar.gz", "ca1bc4c30b14194209f11a7c95c2bc05a5bfe9dc9e98d0ed4741a50c8c09b7b1"),
    Linux(:x86_64, libc=:musl, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-linux-musl-gcc8.tar.gz", "ce80abf381ad515aa80e071c00547255336229c1c5ad12e2f27b1c3d75aa6d00"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-w64-mingw32-gcc7.tar.gz", "2f601b6890f910697da85f6a895bb6c893691fc0a324932ac8a04dd7d2479cfa"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/libhelicsSharedLib.v2.2.2.x86_64-w64-mingw32-gcc8.tar.gz", "3d9e65c9b9af7c49f102bad0b29f597f21c55b3888dda5c0333674d3bc6d348d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
